@using System.Reflection
@using Frankstein.Kompiler
@using ResponseExtensions = Frankstein.Common.Mvc.ResponseExtensions
@{

    var json = Request.Unvalidated("_csharpcode");

    if (json.IsEmpty())
    {
        ResponseExtensions.WriteAjax(Response, new { success = false, msg = "_csharpcode" });
    }
    else
    {
        var code = Json.Decode(json);
        byte[] buffer = { };
        string msg = string.Empty;
        try
        {
            var kompiler = new CodeDomWrapper();
            msg = kompiler.CompileString(code, out buffer);
        }
        catch (Exception ex)
        {
            ResponseExtensions.WriteAjax(Response, new { success = false, msg = ex.Message }, true, 500);
        }

        if (string.IsNullOrEmpty(msg) && buffer.Length > 0)
        {
            try
            {
                
                var assembly = Assembly.Load(buffer);
                var method = assembly.EntryPoint;

                using (var writer = new StringWriter())
                {
                    Console.SetOut(writer);

                    method.Invoke(null, new object[0]);

                    var sb = writer.GetStringBuilder();
                    ResponseExtensions.WriteAjax(Response, new { success = true, msg = sb.ToString() });

                    writer.Close();
                }
            }
            catch (Exception ex)
            {
                ResponseExtensions.WriteAjax(Response, new { success = false, msg = ex.Message }, status: 500);
            }
        }
        else
        {
            ResponseExtensions.WriteAjax(Response, new { success = false, msg });
        }
    }
}